package org.girlswhocode.natureconnectapi;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/goals") // This means URL's start with /demo (after Application path)
public class GoalController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GoalRepository goalRepository;
    private ActiveGoalRepository activeGoalRepository;

    /*
    @PostMapping(path="/get") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }
*/

    @GetMapping(path="/{id}")
    public ResponseEntity<Goal> getGoalsById(@PathVariable Integer id) {
        Optional<Goal> product = goalRepository.findById(id);
        if(product.isPresent()) {
            return ResponseEntity.ok(product.get());
        }
        else {
            return ResponseEntity.notFound().build();
        }

    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<Goal> getAllGoals() {
        // This returns a JSON or XML with the users
        return goalRepository.findAll();
    }


@GetMapping(path="/active/{goalType}")
public ResponseEntity<Goal> activeGoal(@PathVariable String goalType) {
    //
    Optional<Goal> activeGoal = goalRepository.findActiveGoal(goalType);
    if(activeGoal.isPresent()) {
        return ResponseEntity.ok(activeGoal.get());
    }
    else {
        return ResponseEntity.notFound().build();
    }

}
/*
    @GetMapping(path="/active/{goalType}")
    public ResponseEntity<Goal> goalPicker(@PathVariable String goalType) {
        //
        Optional<Goal> activeGoal = goalRepository.findActiveGoal(goalType);
        if(activeGoal.isPresent()) {
            return ResponseEntity.ok(activeGoal.get());
        }
        else {
            return ResponseEntity.notFound().build();
        }

    }
*/

}